package routines;
import java.io.FileReader;
import java.io.IOException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;

import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import org.bouncycastle.openssl.PEMDecryptorProvider;
import org.bouncycastle.openssl.PEMEncryptedKeyPair;
import org.bouncycastle.openssl.PEMKeyPair;
import org.bouncycastle.openssl.PEMParser;
import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;
import org.bouncycastle.openssl.jcajce.JcePEMDecryptorProviderBuilder;

import sun.misc.BASE64Encoder;
/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class RSASignature {

    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
    public static void helloExample(String message) {
        if (message == null) {
            message = "World"; //$NON-NLS-1$
        }
        System.out.println("Hello " + message + " !"); //$NON-NLS-1$ //$NON-NLS-2$
    }
    
    
    
    /**
     * getEncodedString: returns signatured and encoded form of an input string based on certificate mentioned 
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("certificate path") input: Path of certificate that contains private and public key.
     * 
     * {param} string("key password") input: pass phrase for decrypting certificate
     * 
     * {param} string("string to be signed") input: String to be signed and encoded
     * 
     * {example} 
     */
    public static String getEndodedSignature(String certiPath, String keyPassword,String toSign){
    	String signedString = "";
    	try{
    		
    		PrivateKey pk = readPrivateKey(certiPath,keyPassword);
    		PublicKey pubk = readPublicKey(certiPath,keyPassword);
    		byte[] data = toSign.getBytes("UTF8");

            Signature sig = Signature.getInstance("SHA1WithRSA");
            sig.initSign(pk);
            sig.update(data);
            byte[] signatureBytes = sig.sign();
            signedString = new BASE64Encoder().encode(signatureBytes);
            System.out.println("Singature:" + signedString);

            sig.initVerify(pubk);
            sig.update(data);
            System.out.println("Verification if data and password combination is correct:: \nResult is : "+sig.verify(signatureBytes));

    		}catch(Exception e){
    			
    			e.printStackTrace();
    		}

    	return signedString;
    }
    
    
    /**
     * readPrivateKey: Reads private key from pem certificate and returns the same
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("private key certificate path") input: Path of certificate that contains private key.
     * 
     * {param} string("key password") input: pass phrase for decrypting certificate
     * 
     * {example} 
     */
    private static PrivateKey readPrivateKey(String privateKeyPath, String keyPassword) throws IOException {
		
	    FileReader fileReader = new FileReader(privateKeyPath);
	    PEMParser keyReader = new PEMParser(fileReader);

	    JcaPEMKeyConverter converter = new JcaPEMKeyConverter();
	    PEMDecryptorProvider decryptionProv = new JcePEMDecryptorProviderBuilder().build(keyPassword.toCharArray());

	    Object keyPair = keyReader.readObject();
	    PrivateKeyInfo keyInfo;

	    if (keyPair instanceof PEMEncryptedKeyPair) {
	        PEMKeyPair decryptedKeyPair = ((PEMEncryptedKeyPair) keyPair).decryptKeyPair(decryptionProv);
	        keyInfo = decryptedKeyPair.getPrivateKeyInfo();
	    } else {
	        keyInfo = ((PEMKeyPair) keyPair).getPrivateKeyInfo();
	    }

	    keyReader.close();

	    return converter.getPrivateKey(keyInfo);
	}

    
    /**
     * readPublicKey: Reads public key from pem certificate and returns the same
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("private key certificate path") input: Path of certificate that contains public key.
     * 
     * {param} string("key password") input: pass phrase for decrypting certificate
     * 
     * {example} 
     */
    private static PublicKey readPublicKey(String privateKeyPath, String keyPassword) throws IOException {

	    FileReader fileReader = new FileReader(privateKeyPath);
	    PEMParser keyReader = new PEMParser(fileReader);

	    JcaPEMKeyConverter converter = new JcaPEMKeyConverter();
	    PEMDecryptorProvider decryptionProv = new JcePEMDecryptorProviderBuilder().build(keyPassword.toCharArray());

	    Object keyPair = keyReader.readObject();
	    SubjectPublicKeyInfo keyInfo;

	    if (keyPair instanceof PEMEncryptedKeyPair) {
	        PEMKeyPair decryptedKeyPair = ((PEMEncryptedKeyPair) keyPair).decryptKeyPair(decryptionProv);
	        keyInfo = decryptedKeyPair.getPublicKeyInfo();
	    } else {
	        keyInfo = ((PEMKeyPair) keyPair).getPublicKeyInfo();
	    }

	    keyReader.close();

	    return converter.getPublicKey(keyInfo);
	}
    
    
    
}
